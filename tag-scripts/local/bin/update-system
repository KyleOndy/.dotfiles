#!/usr/bin/env bash
set -euo pipefail

BACKUP=true

function update_sources () {
  printf "Updating sources...\n\t"
  sudo apt -qq update
}

function update_packages () {
  printf "Ugrading packages...\n\t"
  sudo apt -qq -y dist-upgrade
}

function remove_packages () {
  printf "Removing unneeded packages...\n\t"
  sudo apt -qq -y autoremove
}

function update_dotfiles () {
  # update dotfiles before applying them
  pushd "$DOTFILES"
  git fetch --all && git pull && git push
  popd
}

function apply_dotfiles () {
  export RCRC=~/.dotfiles/config/rcrc
  rcup
}

function nvim_plug_update () {
  nvim -c PlugUpgrade -c PlugClean -c PlugUpdate -c quitall
}

function pass_update () {
  passstore="$HOME/.password-store"
  if [ -d "$passstore" ]; then
    pushd "$passstore"
    # pull any new changes (from all remotes)
    git remote | xargs -L1 -I R git pull R master
    # push any new changes (from all remotes)
    git remote | xargs -L1 -I R git push R master
    popd
  fi
}

function update_tmux () {
  # tmux plugins
  TPM_BIN="$HOME/.tmux/plugins/tpm/bin"
  "$TPM_BIN/clean_plugins"
  "$TPM_BIN/install_plugins"
  "$TPM_BIN/update_plugins" all
}

function tarsnap_backup () {
  tarsnapper -c "$HOME/.config/tarsnap/tarsnap.conf" make
  tarsnap --print-stats
}

# read args
while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo "Help!"
      shift
      ;;
    --no-backup)
      BACKUP=false
      shift
      ;;
    *)
      break
      ;;
  esac
done


update_sources
update_packages
remove_packages
update_dotfiles
apply_dotfiles
nvim_plug_update
pass_update
update_tmux

if [ "$BACKUP" = true ]; then
  tarsnap_backup
fi
