#!/usr/bin/env bash
set -euo pipefail

BACKUP=false
PYTHON=false
READ_ONLY=false
CRON_JOBS=false

function _echo () {
  # check if stdout is a terminal...
  if test -t 1; then

    # see if it supports colors...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
      #bold="$(tput bold)"
      #underline="$(tput smul)"
      #standout="$(tput smso)"
      normal="$(tput sgr0)"
      #black="$(tput setaf 0)"
      #red="$(tput setaf 1)"
      green="$(tput setaf 2)"
      #yellow="$(tput setaf 3)"
      #blue="$(tput setaf 4)"
      #magenta="$(tput setaf 5)"
      #cyan="$(tput setaf 6)"
      #white="$(tput setaf 7)"
    fi
  fi

  echo "${green}### ${1} ###${normal}"
}

function _git_pull_mater_all_remotes () {
  git fetch --all
  git remote | xargs -L1 -I R git pull R master
}

function _git_push_master_all_remotes () {
    # do not try to push to any any remote starting with `pull_`
    git remote | grep -v pull_ | xargs -L1 -I R git push R master
}

function update_sources () {
  _echo "apt update"
  sudo apt -qq update
}

function update_packages () {
  _echo "apt dist-upgrade"
  sudo apt -qq -y dist-upgrade
}

function remove_packages () {
  _echo "apt autoremove"
  sudo apt -qq -y autoremove
}

function update_dotfiles () {
  # update dotfiles before applying them
  pushd "$DOTFILES"
  _echo "pulling dotfiles"
  _git_pull_mater_all_remotes
  if ! $READ_ONLY; then
    _echo "pushing dotfiles"
    _git_push_master_all_remotes
  fi
  popd
}

function apply_dotfiles () {
  export RCRC=~/.dotfiles/config/rcrc
  _echo "applying dotfiles"
  rcup
}

nvim_virtualenv_setup() {
  pyenv virtualenv 3.7.0 neovim3
  pyenv activate neovim3
  pip install --upgrade \
    flake8 \
    neovim \
    'python-language-server[all]'
  sudo ln -s "$(pyenv which flake8)" ~/bin/flake8
}

function nvim_plug_update () {
  _echo "Updating nvim plug"
  nvim -c PlugUpgrade -c PlugClean -c PlugUpdate -c quitall
}

function pass_update () {
  passstore="$HOME/.password-store"
  if [ -d "$passstore" ]; then
    pushd "$passstore"
    _echo "pulling new passwords"
    _git_pull_mater_all_remotes
    # push any new changes (from all remotes)
    if ! $READ_ONLY; then
      _echo "pushing new passwords"
      _git_push_master_all_remotes
    fi
    popd
  fi
}

function update_tmux () {
  # tmux plugins
  TPM_BIN="$HOME/.tmux/plugins/tpm/bin"
  _echo "updating tmux plugins"
  "$TPM_BIN/clean_plugins"
  "$TPM_BIN/install_plugins"
  "$TPM_BIN/update_plugins" all
}

function tarsnap_backup () {
  # I had to do a little magic to get this working.
  # I installed pyenv and tarsnapper under root
  _echo "Running tarsnap"
  sudo -i tarsnapper -c "$HOME/.config/tarsnap/tarsnapper.conf" make
  sudo tarsnap --print-stats
}

function install_python_with_pyenv () {
  function pyenv_install () {
    _echo "(pyenv) installing: $1"
    pyenv install --skip-existing "$1"
  }

  _echo "(pyenv) ensuring prereqs installed"
  # https://github.com/pyenv/pyenv/wiki/Common-build-problems#requirements
  sudo apt install -qq -y \
    build-essential \
    curl \
    libbz2-dev \
    libffi-dev \
    liblzma-dev \
    libncurses5-dev \
    libncursesw5-dev \
    libreadline-dev \
    libsqlite3-dev \
    libssl-dev \
    llvm \
    make \
    tk-dev \
    wget \
    xz-utils \
    zlib1g-dev

  pyenv_install 2.7.15
  #pyenv_install 3.4.9
  pyenv_install 3.5.6
  pyenv_install 3.6.7
  pyenv_install 3.7.1
}

function update_cron () {
  sudo ln --force --symbolic --verbose "$DOTFILES"/cron-tasks/cron.hourly/* /etc/cron.hourly/
  sudo ln --force --symbolic --verbose "$DOTFILES"/cron-tasks/cron.daily/* /etc/cron.daily/
  sudo ln --force --symbolic --verbose "$DOTFILES"/cron-tasks/cron.weekly/* /etc/cron.weekly/
  sudo ln --force --symbolic --verbose "$DOTFILES"/cron-tasks/cron.monthly/* /etc/cron.monthly/
}

function finish {
  if [ "$?" -ne '0' ]; then
    echo "UPDATE SCRIPT FAILED!"
  fi
}

print_help() {
  echo "Usgae:
  --no-backup (Default) Do not run tarsnap
  --backup              Run tarsnap backups
  --read-only           Do not push anything
  --python              Install python versions (pyenv)
  --cron                Install cron jobs"
}


trap finish exit
# read args
while test $# -gt 0; do
  case "$1" in
    -h|--help)
      print_help
      exit 0
      ;;
    --no-backup)
      BACKUP=false
      shift
      ;;
    --backup)
      BACKUP=true
      shift
      ;;
    --read-only)
      READ_ONLY=true
      shift
      ;;
    --python)
      PYTHON=true
      shift
      ;;
    --cron)
      CRON_JOBS=true
      shift
      ;;
    *)
      echo "unknown flag '$1'. Exiting"
      print_help
      exit 1
      break
      ;;
  esac
done


update_sources
update_packages
remove_packages
update_dotfiles
apply_dotfiles
nvim_virtualenv_setup
nvim_plug_update
pass_update
update_tmux
if [ "$CRON_JOBS" = true ]; then
  update_cron
fi

if [ "$PYTHON" = true ]; then
  install_python_with_pyenv
fi

if [ "$BACKUP" = true ]; then
  tarsnap_backup
fi
