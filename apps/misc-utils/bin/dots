#!/usr/bin/env bash
set -e

pushd () {
  command pushd "$@" > /dev/null
}
popd () {
  command popd > /dev/null
}
check_program() {
  if is_program_available "$1"; then
    #printf '%-12s\t[installed]\n' "$1"
    :
  else
    printf '%-12s\t[missing]\n' "$1"
  fi
}

is_program_available() {
  local p="$1"
  command -v "$p" >/dev/null 2>&1
}

# Commands
pushd "$DOTFILES"
case "$1" in
  check)
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @"{u}")
    BASE=$(git merge-base @ @"{u}")
    if [ "$LOCAL" = "$REMOTE" ]; then
      echo "dotfiles are up-to-date"
    elif [ "$LOCAL" = "$BASE" ]; then
      echo "dotfiles are behind origin/master. Attempting to pull."
    elif [ "$REMOTE" = "$BASE" ]; then
      echo "dotfiles are ahead of origin/master. Please rebase if needed and push."
    else
      echo "dotfiles have diverged. You are on your own. Good luck!"
    fi
    ;;
  update)
    git pull
    ;;
  missing)
    while read -r PROGRAM
    do
      check_program "$PROGRAM"
    done < "$DOTFILES/programs_to_check.txt"
    ;;
  apply)
    # if we do not have a local config file, create an empty one
    FISH_CONFIG_DIR="$HOME/.config/fish"
    LOCAL_FISH_CONFIG="$FISH_CONFIG_DIR/config.fish.local"
    if [ ! -f "$LOCAL_FISH_CONFIG" ]; then
      mkdir -p "$FISH_CONFIG_DIR"
      touch "$LOCAL_FISH_CONFIG"
    fi

    # Lets symlink some files!
    find "$DOTFILES/apps/" -maxdepth 2 -mindepth 2 -exec cp -fa --symbolic-link {} "$HOME" \;

    # fix some off permission of gpg
    chown "$(whoami)":"$(whoami)" ~/.gnupg/gpg.conf
    chmod 600 ~/.gnupg/*
    chmod 700 ~/.gnupg
    ;;
  status)
    git status
    ;;
  *)
    echo "Unknow command: dots $1. Try dots check|update|missing|apply|status"
    ;;
esac
popd
