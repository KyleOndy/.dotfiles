# vim: ft=gitconfig
[user]
  email = kyle@ondy.me
  name = Kyle Ondy
  signingkey = 491F91C9
[core]
  # use the best editor of all time.
  editor = nvim
  # updates to <ref> are logged in $GIT_DIR/logs/<ref>. This information can be
  # userd to determine the state of a repository at a point in history.
  logAllRefUpdates = always
[commit]
  template = ~/.config/git/message.txt
  gpgSign = true
  verbose = true
[init]
  templatedir = ~/.config/git/template
[color]
  ui = auto
[color "branch"]
  current = yellow bold
  local = green bold
  remote = cyan bold
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
[color "status"]
  added = green bold
  changed = yellow bold
  untracked = red bold
[diff]
  tool = vimdiff
  mnemonicprefix = true
[difftool]
  prompt = false
[merge]
  ff = false
  tool = vimdiff
  conflictstyle = diff3
[mergetool "vimdiff"]
  cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
[push]
  default = current
  followTags = true
[pull]
  rebase = true
[rebase]
  autoStash = true
  stat = true
[alias]
  # meta. for working with the alias
  alias     = ! git config --global --get-regexp ^alias | sort
  ec        = config --global -e

  # save some keystokes.
  s         = status
  co        = checkout
  cob       = checkout -b
  cm        = commit --verbose
  cmm       = commit -m
  ap        = add -p
  forgot    = commit --amend -C HEAD
  wip       = commit -am "WIP: " -m
  undo      = reset HEAD~1 --mixed
  amend     = commit --amend
  recent    = branch --verbose --sort=-committerdate
  sync      = !git fetch --all --prune && git rebase -p --autostash
  save      = !git add -A && git commit -m 'SAVEPOINT'
  ditch     = !git add -A && git commit -m 'TMP: Save before clean reset' && git reset HEAD~1 --hard
  wdiff     = diff --color-words
  upstream  = rev-parse --abbrev-ref --symbolic-full-name @{upstream}
  unstage   = reset HEAD .
  edit      = !nvim $(git diff --name-only)
  track     = add -N

  # Delete the remote version of the current branch
  unpublish = !git push origin :$(git branch-name)

  # get info from the git log
  lg        = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

  # Grep the log
  loggrep   = log -E -i --grep
[gpg]
  program = gpg2
[fetch]
  prune = true
[advice]
  ignoreHook = false
