" Map the leader key to space. Easy to reach with either hand and
" shouldn't clobber other applications control sequences. Need to be
" mindful of tmux's leader (currently <C-Space>) since neovim is very
" often run within a tmux session.
let mapleader="\<SPACE>"

" I didn't really have a strong first choice for localleader, so I
" chose `,` arbitrarily. localleader is used to have different
" implementations for a function depending on file type.
let maplocalleader=","

" 'Ex mode is fucking dumb' --sircmpwm
" I have never intentionally entered Ex mode, make it a NOP.
nnoremap Q <Nop>

" prettier colors
set termguicolors

" Allow backspace over everything in insert mode.
"     indent - allow backspacing over autoindent
"     eol    - allow backspacing over line breaks (join lines)
"     start  - allow backspacing over the start of insert
set backspace=indent,eol,start

" allow completions from; .      - current buffer
"                         w      - buffer from other windows
"                         b      - loaded buffers in the buffer list
"                         u      - unloaded buffers in the buffer list
"                         kspell - current active spell check dict
set complete=.,w,b,u,t,kspell

" make a best guess for where the tabstop should be when starting a new line.
set smartindent

" do not consider octal (leading 0) as a number. I tend to justify columns
" with leading zeros, and rarely (never>) work with octal numbers.
set nrformats-=octal

" greatly decrease the default (1000ms) timeout to wait for a mapped sequence
" to complete (<esc> sequences).
set ttimeoutlen=100

"  I don’t really want Vim to litter my filesystem with all of these piles of
"  nervous energy. --Lee Phillips
"  https://lee-phillips.org/badvim/
"
"  The above link has a much better explanation, but using backup files can
"  write your changes to an unexpected inode, causing inotify (and the like)
"  to not work as expected.
set nobackup
set nowritebackup
set nobackup
set noundofile
set noswapfile

if has("persistent_undo")
   " todo: XDG_DATA dir?
   let target_path = expand('~/.undodir')

    " create the directory and any parent directories
    " if the location does not exist.
    if !isdirectory(target_path)
        call mkdir(target_path, "p", 0700)
    endif

    let &undodir=target_path
    set undofile
endif

" Give more space for displaying messages. Useful for diagnostics
set cmdheight=2

set spellfile=~/.config/nvim/spell/en.utf-8.add,~/.config/nvim/spell/shared.en.utf-8.add

" # search settings
" -------------------------------------------------------------

" Highlight search results. Makes it easy to see all the matches.
set hlsearch

" Make searching case insensitive ...
set ignorecase

" ... unless the query has capital letters.
set smartcase

" jump to the first current match
set incsearch

" Use 'magic' patterns (extended regular expressions).
set magic

" Use <C-L> to clear the highlighting of :set hlsearch. Muscle memory maps
" nicely to clearing a terminal.
nnoremap <silent> <C-L> :nohlsearch<CR><C-L>

" # formattings
" -------------------------------------------------------------
set showcmd             " Show (partial) command in status line.
set showmatch           " highlight matching brackets.
set showmode            " Show current mode.
set ruler               " Show the line and column numbers of the cursor.
set number              " Show the line numbers on the left side.
set formatoptions+=o    " Continue comment marker in new lines.
set textwidth=0         " Hard-wrap long lines as you type them.
set expandtab           " Insert spaces when TAB is pressed.
set tabstop=2           " Render TABs using this many spaces.
set shiftwidth=2        " Indentation amount for < and > commands.

set noerrorbells        " No beeps. No one like terminal bells.
set modeline            " Enable modeline.
set linespace=0         " Set line-spacing to minimum.
set nojoinspaces        " Prevents inserting two spaces after punctuation on a join (J)

" More natural splits
set splitbelow          " Horizontal split below current.
set splitright          " Vertical split to right of current.

if !&scrolloff
  set scrolloff=3       " Show next 3 lines while scrolling.
endif
if !&sidescrolloff
  set sidescrolloff=5   " Show next 5 columns while side-scrolling.
endif
set display+=lastline
set nostartofline       " Do not jump to first character with page commands.

" explicitly show the start of a wrapped line
set showbreak=↪\
" explicitly show these characters
set list                " Show problematic characters.
set listchars=tab:→\ ,nbsp:␣,trail:•,extends:›,precedes:‹

set colorcolumn=72

" Highlight all tabs and trailing whitespace characters is an very noticeable
" color.
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen | match ExtraWhitespace /\s\+$\|\t/

set autoread            " If file updates, load automatically.
set hidden

" todo: move these filetype declaration into own file?

" wrap commit message at 72 characters, set a colorcolumn at 50 chracters for
" the commit title.
autocmd FileType gitcommit setlocal spell | setlocal tw=72 | setlocal colorcolumn=50

" mail width at 72 chracters to preserve formatting when the message is quoted
" in a reply by others
autocmd FileType mail setlocal spell | setlocal tw=72

" enable spell check when writing markdown
autocmd FileType markdown setlocal spell

" HACK! I need to learn the right way to do this. NixOS is loading the
" colorscheme after init.vim, so these get overrideen. checkout
" :scriptnames

set updatetime=250 " quicker updates

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
"
" Remove special characters for filename
set isfname-=:
set isfname-==
set isfname-=+

set history=1000      " Number of lines in command history.
set tabpagemax=50     " Maximum tab pages.

" Path/file expansion in colon-mode.
set wildmenu
set wildmode=list:longest
set wildchar=<TAB>

" use jk to exit insert mode. Escape key is a far reach.
inoremap jk <Esc>`^
" Stop cursor from jumping over wrapped lines
nnoremap j gj
nnoremap k gk
" Make HOME and END behave like shell
inoremap <C-E> <End>
inoremap <C-A> <Home>

" # work with terminal
" make the cursor red. Stands out more
highlight TermCursor ctermfg=red
nmap <silent> <leader>th :new<CR>:terminal<CR>
nmap <silent> <leader>tt :terminal<CR>
nmap <silent> <leader>tv :vnew<CR>:terminal<CR>
nmap <silent> <leader>tb :enew<CR>:terminal<CR>
tnoremap <leader><ESC> <C-\><C-n>
tnoremap <leader>jk <C-\><C-n>

" enable cursorline so we can color it
set cursorline
" Set the line number background coloring to dark gray
autocmd ColorScheme * highlight CursorLineNr ctermbg=DarkRed guibg=DarkRed
" do not highlight the line itslef
autocmd ColorScheme * highlight CursorLine ctermbg=NONE guibg=NONE

" ## languageclient
let g:LanguageClient_autoStart = 1

nnoremap <F5> :call LanguageClient_contextMenu()<CR>

" automatically highlight the word we are seaching for
let g:ackhighlight = 1

"Copy and paste from system clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" todo: enable only in mergetool?
" todo: enable diff bindings
" nmap <Leader>dv :Gvdiffsplit!<CR>
" nmap <Leader>du :diffupdate<CR>
" nmap <Leader>dh :diffget //2<CR>
" nmap <Leader>dl :diffget //3<CR>
