#!/usr/bin/env bash
set -euo pipefail

debug=${DEBUG:-}

_log() {
  >&2 echo "LOG: $(date --iso-8601=seconds): $*"
}

_debug() {
  [[ -n "${debug}" ]] && >&2 echo "DEBUG: $(date --iso-8601=seconds): $*"
}

########################################################################
# END STANDARD BASH SCRIPT HEADER
#
# Everything above is scaffoled into my scripts via a helper. Do not change and
# the contents can be updated and changes will be lost.
########################################################################

# TODO: I'm starting to copy and paste the same pattern for these functions. I
#       should probably abstract it into some kind of function.

get_worktree_projects() {
  # returns a path to the root of the worktree projects, the folder
  # _containting_ .bare and .git
  local src_dir=$1

  # depth of 3 works for now as I organize as $src/{org}/{repo}
  fd --type=d --hidden --max-depth=5 .bare "${src_dir}" -x echo  '{//}'
}

update_project_branch() {
  local project="$1"
  local branch="$2"
  branch_folder="${project}/${branch}"
  if [[ -d "$branch_folder" ]]; then
    git -C "$branch_folder" fetch --quiet
    git -C "$branch_folder" pull --quiet
  fi
}

install_precommit() {
  local project="$1"
  local branch="$2"
  branch_folder="${project}/${branch}"
  if [[ -d "$branch_folder" ]]; then
    pushd "$branch_folder" > /dev/null || exit 1
    printf "\t"
    pre-commit install --allow-missing-config || true
    popd > /dev/null || exit 1
  fi
}

set_git_commit_template() {
  local project="$1"
  local branch="$2"
  branch_folder="${project}/${branch}"
  if [[ -f "${branch_folder}/.github/pull_request_template.md" ]]; then
    git -C "$branch_folder" config commit.template .github/pull_request_template.md
    printf "\tset commit template to pull_request_template\n"
  fi
}

cleanup_empty_dirs() {
  local project="$1"
  fd --type=directory --type=empty --max-depth=2 . "$project" -X rmdir 2> /dev/null
}

main() {
  local src_dir=$1

  projects=$(get_worktree_projects "${src_dir}")
  for project in $projects; do
    echo "==> $project"
    update_project_branch "$project" "master"
    update_project_branch "$project" "main"
    ## other nice to haves
    install_precommit "$project" "master"
    install_precommit "$project" "main"
    set_git_commit_template "$project" "master"
    set_git_commit_template "$project" "main"
    cleanup_empty_dirs "$project"
    _log "sleep to not set off our alerts"
    sleep 60
  done
}

root_dir=${1:-"$HOME/src"}
main "$root_dir"
