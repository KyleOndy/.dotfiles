#!/usr/bin/env bash

# TODO: I'm starting to copy and paste the same pattern for these functions. I
#       should probably abstract it into some kind of function.

get_worktree_projects() {
  for dir in "$root_dir/"*; do
    if [[ -d "${dir}/.bare" ]]; then
      echo "$dir"
    fi
  done
}

update_project_branch() {
  local project="$1"
  local branch="$2"
  branch_folder="${project}/${branch}"
  if [[ -d "$branch_folder" ]]; then
    git -C "$branch_folder" fetch --quiet
    git -C "$branch_folder" pull --quiet
  fi
}

install_precommit() {
  local project="$1"
  local branch="$2"
  branch_folder="${project}/${branch}"
  if [[ -d "$branch_folder" ]]; then
    pushd "$branch_folder" > /dev/null || exit 1
    printf "\t"
    pre-commit install --allow-missing-config || true
    popd > /dev/null || exit 1
  fi
}

set_git_commit_template() {
  local project="$1"
  local branch="$2"
  branch_folder="${project}/${branch}"
  if [[ -f "${branch_folder}/.github/pull_request_template.md" ]]; then
    git -C "$branch_folder" config commit.template .github/pull_request_template.md
    printf "\tset commit template to pull_request_template\n"
  fi
}

main() {
  projects=$(get_worktree_projects)
  for project in $projects; do
    echo "==> $project"
    update_project_branch "$project" "master"
    update_project_branch "$project" "main"
    # other nice to haves
    install_precommit "$project" "master"
    install_precommit "$project" "main"
    set_git_commit_template "$project" "master"
    set_git_commit_template "$project" "main"
    sleep 60 # to not set off our alerts
  done
}

root_dir=${1:-"$HOME/src"}
main "$@"
